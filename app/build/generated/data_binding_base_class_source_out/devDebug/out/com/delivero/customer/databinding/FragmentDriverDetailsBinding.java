// Generated by view binder compiler. Do not edit!
package com.delivero.customer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.delivero.customer.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.textfield.MaterialAutoCompleteTextView;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDriverDetailsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final MaterialButton addService;

  @NonNull
  public final TextInputEditText capacity;

  @NonNull
  public final TextInputLayout capacityLayout;

  @NonNull
  public final MaterialAutoCompleteTextView pickupValue;

  @NonNull
  public final CircularProgressIndicator progress;

  @NonNull
  public final TextInputEditText regNumber;

  @NonNull
  public final TextInputLayout regNumberLayout;

  @NonNull
  public final TextInputLayout serviceLocationLayout;

  @NonNull
  public final TextInputEditText serviceType;

  @NonNull
  public final TextInputLayout serviceTypeLayout;

  @NonNull
  public final TextInputEditText vehicleType;

  @NonNull
  public final TextInputLayout vehicleTypeLayout;

  private FragmentDriverDetailsBinding(@NonNull ScrollView rootView,
      @NonNull MaterialButton addService, @NonNull TextInputEditText capacity,
      @NonNull TextInputLayout capacityLayout, @NonNull MaterialAutoCompleteTextView pickupValue,
      @NonNull CircularProgressIndicator progress, @NonNull TextInputEditText regNumber,
      @NonNull TextInputLayout regNumberLayout, @NonNull TextInputLayout serviceLocationLayout,
      @NonNull TextInputEditText serviceType, @NonNull TextInputLayout serviceTypeLayout,
      @NonNull TextInputEditText vehicleType, @NonNull TextInputLayout vehicleTypeLayout) {
    this.rootView = rootView;
    this.addService = addService;
    this.capacity = capacity;
    this.capacityLayout = capacityLayout;
    this.pickupValue = pickupValue;
    this.progress = progress;
    this.regNumber = regNumber;
    this.regNumberLayout = regNumberLayout;
    this.serviceLocationLayout = serviceLocationLayout;
    this.serviceType = serviceType;
    this.serviceTypeLayout = serviceTypeLayout;
    this.vehicleType = vehicleType;
    this.vehicleTypeLayout = vehicleTypeLayout;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDriverDetailsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDriverDetailsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_driver_details, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDriverDetailsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addService;
      MaterialButton addService = ViewBindings.findChildViewById(rootView, id);
      if (addService == null) {
        break missingId;
      }

      id = R.id.capacity;
      TextInputEditText capacity = ViewBindings.findChildViewById(rootView, id);
      if (capacity == null) {
        break missingId;
      }

      id = R.id.capacityLayout;
      TextInputLayout capacityLayout = ViewBindings.findChildViewById(rootView, id);
      if (capacityLayout == null) {
        break missingId;
      }

      id = R.id.pickupValue;
      MaterialAutoCompleteTextView pickupValue = ViewBindings.findChildViewById(rootView, id);
      if (pickupValue == null) {
        break missingId;
      }

      id = R.id.progress;
      CircularProgressIndicator progress = ViewBindings.findChildViewById(rootView, id);
      if (progress == null) {
        break missingId;
      }

      id = R.id.regNumber;
      TextInputEditText regNumber = ViewBindings.findChildViewById(rootView, id);
      if (regNumber == null) {
        break missingId;
      }

      id = R.id.regNumberLayout;
      TextInputLayout regNumberLayout = ViewBindings.findChildViewById(rootView, id);
      if (regNumberLayout == null) {
        break missingId;
      }

      id = R.id.serviceLocationLayout;
      TextInputLayout serviceLocationLayout = ViewBindings.findChildViewById(rootView, id);
      if (serviceLocationLayout == null) {
        break missingId;
      }

      id = R.id.serviceType;
      TextInputEditText serviceType = ViewBindings.findChildViewById(rootView, id);
      if (serviceType == null) {
        break missingId;
      }

      id = R.id.serviceTypeLayout;
      TextInputLayout serviceTypeLayout = ViewBindings.findChildViewById(rootView, id);
      if (serviceTypeLayout == null) {
        break missingId;
      }

      id = R.id.vehicleType;
      TextInputEditText vehicleType = ViewBindings.findChildViewById(rootView, id);
      if (vehicleType == null) {
        break missingId;
      }

      id = R.id.vehicleTypeLayout;
      TextInputLayout vehicleTypeLayout = ViewBindings.findChildViewById(rootView, id);
      if (vehicleTypeLayout == null) {
        break missingId;
      }

      return new FragmentDriverDetailsBinding((ScrollView) rootView, addService, capacity,
          capacityLayout, pickupValue, progress, regNumber, regNumberLayout, serviceLocationLayout,
          serviceType, serviceTypeLayout, vehicleType, vehicleTypeLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
