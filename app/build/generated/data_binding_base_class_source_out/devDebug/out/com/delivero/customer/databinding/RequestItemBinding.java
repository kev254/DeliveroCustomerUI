// Generated by view binder compiler. Do not edit!
package com.delivero.customer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.delivero.customer.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.textview.MaterialTextView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class RequestItemBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MaterialTextView cost;

  @NonNull
  public final MaterialTextView costHolder;

  @NonNull
  public final MaterialTextView date;

  @NonNull
  public final MaterialButton details;

  @NonNull
  public final MaterialTextView from;

  @NonNull
  public final MaterialTextView fromHolder;

  @NonNull
  public final MaterialTextView requestType;

  @NonNull
  public final MaterialTextView to;

  @NonNull
  public final MaterialTextView toHolder;

  @NonNull
  public final MaterialTextView trackingNumber;

  private RequestItemBinding(@NonNull RelativeLayout rootView, @NonNull MaterialTextView cost,
      @NonNull MaterialTextView costHolder, @NonNull MaterialTextView date,
      @NonNull MaterialButton details, @NonNull MaterialTextView from,
      @NonNull MaterialTextView fromHolder, @NonNull MaterialTextView requestType,
      @NonNull MaterialTextView to, @NonNull MaterialTextView toHolder,
      @NonNull MaterialTextView trackingNumber) {
    this.rootView = rootView;
    this.cost = cost;
    this.costHolder = costHolder;
    this.date = date;
    this.details = details;
    this.from = from;
    this.fromHolder = fromHolder;
    this.requestType = requestType;
    this.to = to;
    this.toHolder = toHolder;
    this.trackingNumber = trackingNumber;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static RequestItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static RequestItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.request_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static RequestItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.cost;
      MaterialTextView cost = ViewBindings.findChildViewById(rootView, id);
      if (cost == null) {
        break missingId;
      }

      id = R.id.costHolder;
      MaterialTextView costHolder = ViewBindings.findChildViewById(rootView, id);
      if (costHolder == null) {
        break missingId;
      }

      id = R.id.date;
      MaterialTextView date = ViewBindings.findChildViewById(rootView, id);
      if (date == null) {
        break missingId;
      }

      id = R.id.details;
      MaterialButton details = ViewBindings.findChildViewById(rootView, id);
      if (details == null) {
        break missingId;
      }

      id = R.id.from;
      MaterialTextView from = ViewBindings.findChildViewById(rootView, id);
      if (from == null) {
        break missingId;
      }

      id = R.id.fromHolder;
      MaterialTextView fromHolder = ViewBindings.findChildViewById(rootView, id);
      if (fromHolder == null) {
        break missingId;
      }

      id = R.id.requestType;
      MaterialTextView requestType = ViewBindings.findChildViewById(rootView, id);
      if (requestType == null) {
        break missingId;
      }

      id = R.id.to;
      MaterialTextView to = ViewBindings.findChildViewById(rootView, id);
      if (to == null) {
        break missingId;
      }

      id = R.id.toHolder;
      MaterialTextView toHolder = ViewBindings.findChildViewById(rootView, id);
      if (toHolder == null) {
        break missingId;
      }

      id = R.id.trackingNumber;
      MaterialTextView trackingNumber = ViewBindings.findChildViewById(rootView, id);
      if (trackingNumber == null) {
        break missingId;
      }

      return new RequestItemBinding((RelativeLayout) rootView, cost, costHolder, date, details,
          from, fromHolder, requestType, to, toHolder, trackingNumber);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
